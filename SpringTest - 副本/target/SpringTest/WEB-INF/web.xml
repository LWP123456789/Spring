<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <display-name>Archetype Created Web Application</display-name>

<!--   声明spring监听器 -->
<!--  <context-param>-->
<!--    <param-name>contextConfigLocation</param-name>-->
<!--    <param-value>classpath:conf/applicationContext.xml</param-value>-->
<!--  </context-param>-->
<!--  <listener>-->
<!--    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--  </listener>-->

  <!-- 声明SpringMVC的核心对象

    错误原因：
      在Servlet的init()方法中，创建springmvc使用的容器对象WebApplicationContext.

    DispatcherServlet作用：
    1.在init()中创建springmvc的容器对象. WebApplicationContext. 创建springmvc配置文件在的所有java对象,java对象即controller对象
    2.DispatcherServlet是一个Servlet,能够接受请求
   -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--  自定义配置文件的位置  -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:conf/springmvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!--
       url-pattern 作用：把一些请求交给指定的servlet处理
       使用中央调度器(DispatcherServlet)
       1.使用扩展名方式，格式 *.xxx, xxx是自定义的扩展名.例如 *.do,*.action,*.mvc等等
       2.使用斜杠"/",导致中央调度器成为了默认的default servlet,需要处理静态资源和其他的未映射的请求
          默认中央调度器没有处理静态资源的控制器对象,所以静态资源都是404.some.do这个请求有MyController对象,所以能访问

          如果项目中,中央调度器设置了"/"，动态资源能访问,静态资源不能访问.需要处理静态资源的访问工作.
    -->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

  <!-- 声明过滤器,框架提供的,解决post请求中乱码的问题 -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--  给过滤器属性赋值  -->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <!--   强制请求(request) 对象使用encoding的编码方式    -->
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <!--   强制请求(response) 对象使用encoding的编码方式    -->
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--  强制所有请求,先经过过滤器处理  -->
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter>
    <filter-name>crossDomainFilter</filter-name>
    <filter-class>top.lep101.spring5.filter.CrossDomainFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>crossDomainFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>
